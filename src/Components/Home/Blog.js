import React from "react";
import "./Blog.css";

const Blogs = () => {
  return (
    <div className="mx-10 my-10 mt-5 text-left">
      <div className="qna-section">
        <h3>
          {" "}
          How to improve the performance of react application? <hr />
        </h3>
        <p>
          <span>ANSWER:</span> I'll take four optimization techniques to improve
          react performance. These are: <br />
          A: Keeping component state local where necessary We’ve learned that a
          state update in a parent component re-renders the parent and its child
          components. So, to ensure re-rendering a component only happens when
          necessary, we can extract the part of code that cares about the
          component state, making it local to that part of the code. <br />
          B: Memoizing React components to prevent unnecessary re-renders
          Memoization is an optimization strategy that caches a
          component-rendered operation, saves the result in memory, and returns
          the cached result for the same input. In essence, if a child component
          receives a prop, a memoized component shallowly compares the prop by
          default and skips re-rendering the child component if the prop hasn’t
          changed. <br />
          C: Code-splitting in React using dynamic import() Code-splitting is
          another important optimization technique for a React application. By
          default, when a React application renders in a browser, a “bundle”
          file containing the entire application code loads and serves to users
          at once. This file is generated by merging all the code files needed
          to make a web application work. <br />
          D: Lazy loading images in React To optimize an application that
          consists of several images, we can avoid rendering all of the images
          at once to improve the page load time. With lazy loading, we can wait
          until each of the images is about to appear in the viewport before we
          render them in the DOM.
        </p>
      </div>

      <div className="qna-section">
        <h3>
          What are the different ways to manage a state in a React application?{" "}
          <hr />
        </h3>

        <p>
          {" "}
          <span>ANSWER:</span> There are four main types of state you need to
          properly manage in our React apps <br />
          A: Local (UI) state – Local state is data we manage in one or another
          component. Local state is most often managed in React using the
          useState hook. <br />
          B: Global (UI) state – Global state is data we manage across multiple
          components. Global state is necessary when we want to get and update
          data anywhere in our app, or in multiple components at least. <br />
          C: Server state – Data that comes from an external server that must be
          integrated with our UI state. Server state is a simple concept, but
          can be hard to manage alongside all of our local and global UI state.{" "}
          <br />
          D: URL state – Data that exists on our URLs, including the pathname
          and query parameters. URL state is often missing as a category of
          state, but it is an important one. In many cases, a lot of major parts
          of our application rely upon accessing URL state. Try to imagine
          building a blog without being able to fetch a post based off of its
          slug or id that is located in the URL!
        </p>
      </div>

      <div className="qna-section">
        <h3>
          How does prototypical Inheritance work? <hr />
        </h3>
        <p>
          <span>ANSWER:</span> JavaScript is a prototype-based, Object Oriented
          programming language. The Prototypal Inheritance is a feature in
          javascript used to add methods and properties in objects. Simply put,
          prototypical inheritance refers to the ability to access object
          properties from another object. We use a JavaScript prototype to add
          new properties and methods to an existing object constructor. We can
          then essentially tell our JS code to inherit properties from a
          prototype. Prototypical inheritance allows us to reuse the properties
          or methods from one JavaScript object to another through a reference
          pointer function. All JavaScript objects inherit properties and
          methods from a prototype. Date objects inherit from Date.prototype.
          Array objects inherit from Array.prototype. Player objects inherit
          from Player.prototype.
        </p>
      </div>

      <div className="qna-section">
        <h3>
          Why you do not set the state directly in React? <hr />
        </h3>
        <p>
          <span>ANSWER:</span> One should never update the state directly
          because of the following reasons: If we update it directly, calling
          the setState() afterward may just replace the update you made. When
          you directly update the state, it does not change this.state
          immediately. Instead, it creates a pending state transition, and
          accessing it after calling this method will only return the present
          value. We will lose control of the state across all components.
        </p>
      </div>

      <div className="qna-section">
        <h3>
          What is a unit test? Why should write unit tests? <hr />
        </h3>
        <p>
          <span>ANSWER:</span> JavaScript Unit Testing is a method where
          JavaScript test code is written for a web page or web application
          module. It is then combined with HTML as an inline event handler and
          executed in the browser to test if all functionalities are working as
          desired. These unit tests are then organized in the test suite. Unit
          testing ensures that all code meets quality standards before it’s
          deployed. This ensures a reliable engineering environment where
          quality is paramount. Over the course of the product development life
          cycle, unit testing saves time and money, and helps developers write
          better code, more efficiently.
        </p>
      </div>

      <div className="qna-section">
        <h3>
          How to implement a search to find products by name?
          <hr />
        </h3>
        <p>
          <span>ANSWER:</span> I'll take a variable and use find method to the
          array. The find method will return the objects of the product. Then
          I'll check if the value of the search field is equal to the
          object.name or not. Then I'll use the variable jsx element to find the
          search result.
        </p>
      </div>
    </div>
  );
};

export default Blogs;